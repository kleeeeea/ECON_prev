For instance , to test the effect of differing degrees of heterogeneity , we generate dataspaces with different distributions for the number of matches in which an element participates .	737707	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
We also experimented with different bucket sizes for the histogram technique .	737675	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
As expected , the effectiveness is higher at smaller bucket sizes , though there was not a marked difference .	737676	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
For all experiments with the histogram approach , we use a bucket size of 0 01 .	737677	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
The results of this experiment are presented in Figure 6 .	737678	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
The MySQL cluster had three machines each running one MySQL server .	454799	auto:0.5533821,textrank:0.57603973,kea:0.5493078,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.5576033,econ:0.5580485
This performance is due to the inaccurate confidences produced by SecondString and the lack of confidences for Google Base matches .	737680	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
A slight improvement occurs when using the histogram approach to convert the confidence for the Google Base matches VPI with GB histogram .	737681	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
The improvement is small because the conversion is very coarse-grained : all Google Base matches have no input confidence and thus get assigned to the same histogram bucket resulting in all Google Base matches getting the same output probability .	737682	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
When the SecondString match confidences are converted to probabilities , we see a large jump in the V P I strategy s effectiveness VPI with SStr histogram .	737683	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
Here , the histogram approach is able to map input confidences to probabilities	737684	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
	737685	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
Random VPI with 0 5 for GB VPI with SStr histogram	737686	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
2 Wikipedia MySQL Server Roles .	304152	auto:0.68667984,textrank:0.6892921,kea:0.6889272,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
Figure 6 : The performance of the V P I strategy using different means of assigning probabilities to matches , run over the Full dataset .	737690	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
at a very fine resolution .	737692	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
also be stored on the local disk of the EC2 machines that runs the MySQL server .	964509	auto:0.5421135,textrank:0.54112995,kea:0.53222597,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.53216773,econ:0.5360217
Results on Synthetic Datasets Using the dataspace generator , we ran a series of tests that evaluated the V P I strategy under a variety of dataspace environments .	737700	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
REFERENCES	2213158	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
We generated a dataspace that recreates a realistic large-scale data integration environment using realistic values or distributions for different characteristics : e g , 100000 elements and a zipfian distribution for the query weights and items per element .	737703	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
With the existing system , a single MySQL server may suddenly be handling much more load than it can handle , forcing the team to manually re-shard data from this server onto multiple servers .	839464	auto:0.33000466,textrank:0.3285129,kea:0.32972378,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.32532912
Robustness tests .	737705	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
This service enables i applying different topic detection algorithms on the same dataset Figure 3 a and ii interactively exploring the trends of the detected topics : by exploring the ranked result table Figure 3 b in which one can search for specific terms Figure 3 c , by exploring related messages Figure 3 d , by plotting and comparing terms usage Figure 3 e , or by generating time-lines Figure 3 f to 2We use a MySQL server http : www mysql com for this version of the tool .	125994	auto:0.18487464,textrank:0.18643352,kea:0.18207327,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
We bring a MySQL server installed on a high-end laptop , which communicates to an FPGA via Gigabit Ethernet using the SIRC framework 4 see Section 2 .	982443	auto:0.35057828,textrank:0.33912045,kea:0.35065383,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.3436065,econ:0.35079455
Regardless of	737708	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
the distribution used in this experiment , the utilities produced by the V P I strategy are within 10 of the percent of potential improvement in utility as described in the query workload experiment in the previous section .	737710	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
We varied other parameters of the dataspace and ran similar experiments ; all experiments produced results similar to the first experiment .	737711	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
In particular , we varied the distributions for the number items in which each element appears , introduced errors into element cardinality statistics , used different mechanism accuracies , and used different distributions for the query weights as investigated above with the Google Base datasets .	737712	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
All our experiments are performed on a desktop PC running MySQL server 5 0 16 database system over Windows XP SP2 with Pentium D 3 2GHz CPU and 2GBs of RAM .	381876	auto:0.32287973,textrank:0.32371688,kea:0.32072222,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.3275179,econ:0.0
Third , we kill the MySQL server process .	719800	auto:0.64701074,textrank:0.64511526,kea:0.64470947,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
Finally , we restart the MySQL server and collect statistics for recovery processing .	719801	auto:0.51082265,textrank:0.52389044,kea:0.5233121,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.5010324,econ:0.5297529
Two Dell PowerEdge 1955 blade servers are used in the experiments : one is running a MySQL server with the InnoDB backend storage engine supporting a 20-warehouse TPCC database , the other is running a client driver that repeatedly issues TPCC transaction requests and measures the transaction rates .	719163	auto:0.24101754,textrank:0.23587985,kea:0.23898411,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.26409394,econ:0.287475
Figure 6 : Hybrid MySQL Server Setup .	982463	auto:0.6992418,textrank:0.6956831,kea:0.6894548,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
before , we alter the equation for result quality to consider both precision and recall using F-measure 34 2 , defined as	737734	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
At the demo , we will monitor CPU usage of the laptop running the MySQL server .	982471	auto:0.5174965,textrank:0.48740828,kea:0.47140065,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.501817,econ:0.5137988
2 precision recall .	737736	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
precision recall Precision and recall are defined in our context as follows :	737737	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
We redefine the result quality of query Q using F-measure as follows :	737738	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
Substituting this formula into Equation 4 , we can express the expected result quality , Er Q , D , M , when using thresholding :	737740	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
We ran the MySQL server with the LinkBench workload under four different configurations created by turning each of the two options on and off .	1154637	auto:0.42139873,textrank:0.41335425,kea:0.40601355,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.41208142,econ:0.41172028
We used MySQL Server 5 0 51 for our database system , and all algorithms were coded using C and compiled with gcc .	115919	auto:0.44585416,textrank:0.44487497,kea:0.44192895,rake:0.0,spacy_np:0.44185507,StructMineDataPipeline:0.44446406,econ:0.48657703
The MySQL server can be run in verbose mode , such that for every query on tables using the Ibex storage engine the parts of the query that are pushed down to the FPGA are displayed on the server console .	982482	auto:0.33719388,textrank:0.3305894,kea:0.3298684,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.3272498,econ:0.33808196
The MySQL server was run on a Linux system with an AMD Athlon XP 2600 CPU with 2GB RAM running OpenSUSE Linux 11 0 with kernel version 2 6 25 , glibc version 2 8 and GCC version 4 3 1 .	990425	auto:0.24441335,textrank:0.25143296,kea:0.25568125,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.28132433,econ:0.3466685
VPI with GB histogram VPI with full histogram	737688	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
The algorithms were implemented in C and the database was managed using MySQL Server 5 5 27 .	1866724	auto:0.5376375,textrank:0.53422904,kea:0.53629327,rake:0.0,spacy_np:0.5550978,StructMineDataPipeline:0.53898066,econ:0.6016018
Separate hosts were used for the LinkBench client and MySQL server .	454758	auto:0.55019,textrank:0.51259845,kea:0.54732585,rake:0.0,spacy_np:0.53085726,StructMineDataPipeline:0.5113022,econ:0.5091911
The MySQL server was saturated using only a fraction of client CPU and network capacity .	454760	auto:0.4453767,textrank:0.51804554,kea:0.48265958,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.4544056,econ:0.5197585
MySQL server Linux OS	1013353	auto:0.68975055,textrank:0.73635805,kea:0.7353364,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
We have tested the performance of the ColumbuScout system on a Linux machine running ubuntu12 9 and mysql Server 5 1 413 .	431442	auto:0.378186,textrank:0.36331695,kea:0.37604824,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
The database system used for the experiments is MySQL Server 5 0 51 ; and all algorithms are coded using C and compiled and optimized with gcc .	783476	auto:0.4246591,textrank:0.42343682,kea:0.4210917,rake:0.0,spacy_np:0.43620443,StructMineDataPipeline:0.42356938,econ:0.46537346
It uses MySQL server as its underlying database management system .	1620853	auto:0.62874013,textrank:0.63488287,kea:0.60691214,rake:0.0,spacy_np:0.64474595,StructMineDataPipeline:0.0,econ:0.64529216
The V P I strategy is robust to variations in the dataspace characteristics : manipulating one characteristic of the dataspace e g , matches per element , items per element while leaving the others at the realistic values used in the basic tests above has very little effect on the efficacy of the V P I strategy .	737706	auto:0.0,textrank:0.0,kea:0.0,rake:0.0,spacy_np:0.0,StructMineDataPipeline:0.0,econ:0.0
